import os
import asyncio
from aiogram import Bot, Dispatcher, types

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –±–∞–∑—ã
USE_POSTGRES = bool(os.getenv("DATABASE_URL"))

if USE_POSTGRES:
    import asyncpg
else:
    import aiosqlite

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = "8344456246:AAGa-Hy4zOOzoBJdIeJ2JxmdTzbMwE3v9yo"
CHANNEL_USERNAME = "@m_kapusssta"  # e.g. @mychannel
BONUS_TEXT = os.getenv("BONUS_TEXT", "üéÅ –¢–≤–æ–π –±–æ–Ω—É—Å: BONU$25")

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)


# ====== DB –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======
async def init_db():
    if USE_POSTGRES:
        conn = await asyncpg.connect(os.getenv("DATABASE_URL"))
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY
            )
        """)
        await conn.close()
    else:
        async with aiosqlite.connect("users.db") as db:
            await db.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY)")
            await db.commit()


async def has_user(user_id):
    if USE_POSTGRES:
        conn = await asyncpg.connect(os.getenv("DATABASE_URL"))
        row = await conn.fetchrow("SELECT 1 FROM users WHERE user_id=$1", user_id)
        await conn.close()
        return bool(row)
    else:
        async with aiosqlite.connect("users.db") as db:
            async with db.execute("SELECT 1 FROM users WHERE user_id=?", (user_id,)) as cur:
                return bool(await cur.fetchone())


async def add_user(user_id):
    if USE_POSTGRES:
        conn = await asyncpg.connect(os.getenv("DATABASE_URL"))
        await conn.execute(
            "INSERT INTO users (user_id) VALUES ($1) ON CONFLICT DO NOTHING", user_id
        )
        await conn.close()
    else:
        async with aiosqlite.connect("users.db") as db:
            await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
            await db.commit()


# ====== –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò ======
async def is_subscribed(user_id: int):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(
            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
            url=f"https://t.me/{m_kapusssta.lstrip('@')}"
        ),
        types.InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"
        )
    )
   await message.answer(
    """–ü—Ä–∏–≤–µ—Ç! üî• –û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —à–∞–≥ –¥–æ —Ç–≤–æ–µ–≥–æ –º–æ–¥–Ω–æ–≥–æ –∞–ø–≥—Ä–µ–π–¥–∞.

–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @m_kapussta ‚Äî —ç—Ç–æ –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∏–ª—å–Ω—É—é —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é:
üî∏ –ù–æ–≤–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–∂–∏–≤–∞—é—Ç –¥–æ –≤–µ—á–µ—Ä–∞
üî∏ –°–∫–∏–¥–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤–µ—Ç—è—Ç—Å—è –≤ —Ä–µ–∫–ª–∞–º–µ
üî∏ –ò –≤–∞–π–±—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è

–ù–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª ‚Äî –∏ –ø–æ–ª—É—á–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∫–ª—é—á –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –≥–∞—Ä–¥–µ—Ä–æ–±—É.

‚è≥ –¢–∞–π–º–µ—Ä —Ç–∏–∫–∞–µ—Ç. –°—Ç–∏–ª—å –Ω–µ –∂–¥—ë—Ç.""",
    reply_markup=kb
)


@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_subscription(cb: types.CallbackQuery):
    user_id = cb.from_user.id
    if await is_subscribed(user_id):
        if await has_user(user_id):
            await cb.message.answer("‚úÖ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å!")
        else:
            await add_user(user_id)
            await cb.message.answer(BONUS_TEXT)
    else:
        await cb.message.answer("‚ùå –ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è.")


async def main():
    await init_db()
    await dp.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
